/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Originally generated with:
  npx gltfjsx@6.2.3 public/models/Animated Woman.glb -o src/components/AnimatedWoman.jsx -r public

Adapted to support Colyseus-driven serverPosition updates and optional camera follow.
*/

"use client";

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame, useGraph } from "@react-three/fiber";
import React, { useEffect, useMemo, useRef, useState } from "react";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";

const MOVEMENT_SPEED = 0.032;

type GroupProps = { position?: any; [key: string]: any };

type ActionName =
  | "CharacterArmature|Death"
  | "CharacterArmature|Gun_Shoot"
  | "CharacterArmature|HitRecieve"
  | "CharacterArmature|HitRecieve_2"
  | "CharacterArmature|Idle"
  | "CharacterArmature|Idle_Gun"
  | "CharacterArmature|Idle_Gun_Pointing"
  | "CharacterArmature|Idle_Gun_Shoot"
  | "CharacterArmature|Idle_Neutral"
  | "CharacterArmature|Idle_Sword"
  | "CharacterArmature|Interact"
  | "CharacterArmature|Kick_Left"
  | "CharacterArmature|Kick_Right"
  | "CharacterArmature|Punch_Left"
  | "CharacterArmature|Punch_Right"
  | "CharacterArmature|Roll"
  | "CharacterArmature|Run"
  | "CharacterArmature|Run_Back"
  | "CharacterArmature|Run_Left"
  | "CharacterArmature|Run_Right"
  | "CharacterArmature|Run_Shoot"
  | "CharacterArmature|Sword_Slash"
  | "CharacterArmature|Walk"
  | "CharacterArmature|Wave";

export interface AnimatedWomanProps extends GroupProps {
  id: string;
  // Colyseus からのサーバー座標 [x, y, z]
  serverPosition?: [number, number, number];
  // ローカルカメラ追従
  follow?: boolean;
}

export function AnimatedWoman({
  id,
  serverPosition,
  follow = false,
  ...props
}: AnimatedWomanProps) {
  const initialPosition = useMemo(() => {
    if (Array.isArray(serverPosition))
      return new THREE.Vector3(...serverPosition);
    if (Array.isArray((props as any).position))
      return new THREE.Vector3(...((props as any).position as number[]));
    return (props as any).position; // allow Vector3
  }, [(props as any).position, serverPosition]);

  const [target, setTarget] = useState<THREE.Vector3>(
    () => (initialPosition as THREE.Vector3)?.clone?.() || new THREE.Vector3()
  );

  const group = useRef<THREE.Group>(null);
  const { scene, materials, animations } = useGLTF(
    "/models/Animated Woman.glb"
  ) as unknown as {
    scene: THREE.Object3D;
    materials: Record<string, THREE.Material>;
    animations: THREE.AnimationClip[];
  };
  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone) as unknown as {
    nodes: Record<string, any>;
  };

  const { actions } = useAnimations(animations, group);
  const [animation, setAnimation] = useState<ActionName>(
    "CharacterArmature|Idle"
  );

  useEffect(() => {
    const act = actions[animation];
    act?.reset();
    act?.fadeIn(0.32);
    act?.play();
    return () => {
      act?.fadeOut(0.32);
    };
  }, [actions, animation]);

  // サーバーからの最新位置をターゲットとして保持
  useEffect(() => {
    if (Array.isArray(serverPosition)) {
      setTarget(new THREE.Vector3(...serverPosition));
      // 初回はスナップ
      if (group.current && group.current.position.lengthSq() === 0) {
        group.current.position.set(...serverPosition);
      }
    }
  }, [serverPosition]);

  useFrame((state) => {
    if (!group.current) return;

    // サーバーターゲットへ補間移動
    if (target && group.current.position.distanceTo(target) > 0.06) {
      const direction = group.current.position
        .clone()
        .sub(target)
        .normalize()
        .multiplyScalar(MOVEMENT_SPEED);
      group.current.position.sub(direction);
      group.current.lookAt(target);
      setAnimation("CharacterArmature|Run");
    } else {
      setAnimation("CharacterArmature|Idle");
    }

    if (follow) {
      state.camera.position.x = group.current.position.x + 8;
      state.camera.position.y = group.current.position.y + 8;
      state.camera.position.z = group.current.position.z + 8;
      state.camera.lookAt(group.current.position);
    }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group
            name="CharacterArmature"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes.Root} />
          </group>
          <group name="Casual_Body" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Casual_Body_1"
              geometry={nodes.Casual_Body_1.geometry}
              material={materials.White}
              skeleton={nodes.Casual_Body_1.skeleton}
            />
            <skinnedMesh
              name="Casual_Body_2"
              geometry={nodes.Casual_Body_2.geometry}
              material={materials.Skin}
              skeleton={nodes.Casual_Body_2.skeleton}
            />
          </group>
          <group name="Casual_Feet" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Casual_Feet_1"
              geometry={nodes.Casual_Feet_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Casual_Feet_1.skeleton}
            />
            <skinnedMesh
              name="Casual_Feet_2"
              geometry={nodes.Casual_Feet_2.geometry}
              material={materials.Grey}
              skeleton={nodes.Casual_Feet_2.skeleton}
            />
          </group>
          <group name="Casual_Head" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Casual_Head_1"
              geometry={nodes.Casual_Head_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Casual_Head_1.skeleton}
            />
            <skinnedMesh
              name="Casual_Head_2"
              geometry={nodes.Casual_Head_2.geometry}
              material={materials.Hair_Blond}
              skeleton={nodes.Casual_Head_2.skeleton}
            />
            <skinnedMesh
              name="Casual_Head_3"
              geometry={nodes.Casual_Head_3.geometry}
              material={materials.Hair_Brown}
              skeleton={nodes.Casual_Head_3.skeleton}
            />
            <skinnedMesh
              name="Casual_Head_4"
              geometry={nodes.Casual_Head_4.geometry}
              material={materials.Brown}
              skeleton={nodes.Casual_Head_4.skeleton}
            />
          </group>
          <skinnedMesh
            name="Casual_Legs"
            geometry={nodes.Casual_Legs.geometry}
            material={materials.Orange}
            skeleton={nodes.Casual_Legs.skeleton}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/Animated Woman.glb");
